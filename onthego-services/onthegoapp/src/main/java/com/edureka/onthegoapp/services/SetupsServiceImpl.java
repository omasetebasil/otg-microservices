package com.edureka.onthegoapp.services;

import java.util.List;
import java.util.Optional;

import com.edureka.onthegoapp.models.Country;
import com.edureka.onthegoapp.models.Currency;
import com.edureka.onthegoapp.models.CurrencyRate;
import com.edureka.onthegoapp.models.CustomerPaymentMode;
import com.edureka.onthegoapp.models.Driver;
import com.edureka.onthegoapp.models.DriverVehicle;
import com.edureka.onthegoapp.models.Location;
import com.edureka.onthegoapp.models.MapGrid;
import com.edureka.onthegoapp.models.Payment;
import com.edureka.onthegoapp.models.PaymentMode;
import com.edureka.onthegoapp.models.Rider;
import com.edureka.onthegoapp.models.Vehicle;
import com.edureka.onthegoapp.models.VehicleCategory;

public interface  SetupsServiceImpl {
	List<Country> getAllCountries();
	Optional <Country> getCountryById(Long countryId);
	Country createCountry(Country country);
	void deleteCountry(long id);
	List<PaymentMode> getAllPaymentMode();
    Optional<PaymentMode> getPaymentModeById(Long paymentModeId);
    PaymentMode createPaymentMode(PaymentMode paymentMode);
    void deletePaymentMode(long id);
	List<CustomerPaymentMode> getAllCustomerPaymentMode();
    Optional<CustomerPaymentMode> getCustomerPaymentModeById(Long customerPaymentMode);
    CustomerPaymentMode createCustomerPaymentMode(CustomerPaymentMode customerPaymentMode);
    void deleteCustomerPaymentMode(long id);
	List<VehicleCategory> getAllVehicleCategories();
    Optional<VehicleCategory> getVehicleCategoryById(Long id);
    VehicleCategory createVehicleCategory(VehicleCategory vehicleCategory);
    void deleteVehicleCategory(long id);
	List<Driver> getAllDrivers();
    Optional<Driver> getDriverById(Long id);
    Driver createDriver(Driver driver);
    void deleteDriver(long id);
	List<Vehicle> getAllVehicles();
    Optional<Vehicle> getVehicleById(Long id);
    Vehicle createVehicle(Vehicle vehicle);
    void deleteVehicle(long id);
	List<DriverVehicle> getAllDriverVehicles();
    Optional<DriverVehicle> getDriverVehicleById(Long id);
    DriverVehicle createDriverVehicle(DriverVehicle driverVehicle);
    void deleteDriverVehicle(long id);
	List<Rider> getAllRiders();
    Optional<Rider> getRiderById(Long id);
    Rider createRider(Rider rider);
    void deleteRider(long id);
	List<Currency> getAllCurrencies();
    Optional<Currency> getCurrencyById(Long id);
    Currency createCurrency(Currency currency);
    void deleteCurrency(long id);
	List<Payment> getAllPayments();
    Optional<Payment> getPaymentById(Long id);
    Payment createPayment(Payment payment);
    void deletePayment(long id);
	List<MapGrid> getAllMapGrids();
    Optional<MapGrid> getMapGridById(Long id);
    MapGrid createMapGrid(MapGrid mapGrid);
    void deleteMapGrid(long id);
	List<Location> getAllLocations();
    Optional<Location> getLocationById(Long id);
    Location createLocation(Location location);
    void deleteLocation(long id);
	List<CurrencyRate> getAllCurrencyRates();
    Optional<CurrencyRate> getCurrencyRateById(Long id);
    CurrencyRate createCurrencyRate(CurrencyRate currencyRate);
    void deleteCurrencyRate(long id);
}
